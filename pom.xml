<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.0.RELEASE</version>
    <relativePath />
  </parent>

  <groupId>com.example</groupId>
  <artifactId>carros</artifactId>
  <name>${project.artifactId}</name>
  <description>Base project for Spring Boot</description>

  <!-- <version>1.0.0</version> -->
  <!-- <version>${revision}${sha1}${changelist}</version> -->

  <version>rc-1.3.7-1aced89b9dd3d86f363ff54109296078ee65caf7</version>

  <properties>
    <java.version>11</java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring-cloud.version>Hoxton.SR3</spring-cloud.version>
    <!-- MySQL & Liquibase -->
    <mysql-connector.version>8.0.19</mysql-connector.version>
    <!-- <liquibase.version>3.8.9</liquibase.version> -->
    <!-- Lombok & ModelMapper-->
    <lombok.version>1.18.12</lombok.version>
    <modelmapper.version>2.3.7</modelmapper.version>
    <!-- Jib -->
    <jib.version>2.1.0</jib.version>
    <jib.to.image.username>jojoooo1</jib.to.image.username>
    <jib.to.auth.username>jojoooo1</jib.to.auth.username>
    <jib.container.port>8080</jib.container.port>
    <!-- Test -->
    <skip.integration.test>true</skip.integration.test>
    <skip.unit.test>false</skip.unit.test>
    <!-- Jacoco -->
    <sonar.language>java</sonar.language>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <jacoco.it.execution.data.file>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.it.execution.data.file>
    <jacoco.ut.execution.data.file>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco.ut.execution.data.file>
    <sonar.coverage.jacoco.xmlReportPaths>${project.reporting.outputDirectory}/jacoco-it/jacoco.xml,${project.reporting.outputDirectory}/jacoco-ut/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
    <sonar.login>admin</sonar.login>
    <sonar.password>admin</sonar.password>
    <!-- Jaxb -->
    <jaxb.version>2.3.1</jaxb.version>
    <!-- Prometheus scrapping -->
    <micrometer.version>1.5.1</micrometer.version>
    <logstash.version>6.3</logstash.version>
  </properties>

  <!-- <scm>
		<connection>scm:git:git@github.com/Jojoooo1/spring-using-git-workflow.git</connection>
		<developerConnection>scm:git:git@github.com/Jojoooo1/spring-using-git-workflow.git</developerConnection>
		<url>https://github.com/Jojoooo1/spring-using-git-workflow</url>
	</scm> -->


  <!-- Profile -->

  <profiles>
    <!-- Profile: Integration Test -->
    <profile>
      <id>integration-test</id>
      <properties>
        <skip.integration.test>false</skip.integration.test>
        <skip.unit.test>true</skip.unit.test>
      </properties>
    </profile>
    <!-- Profile: All Test -->
    <profile>
      <id>all-test</id>
      <properties>
        <skip.integration.test>false</skip.integration.test>
        <skip.unit.test>false</skip.unit.test>
      </properties>
    </profile>
    <!-- Profile: Development/Default -->
    <profile>
      <id>dev</id>
      <properties>
        <build.profile.id>dev</build.profile.id>
        <spring.profile.active>dev</spring.profile.active>
      </properties>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
    </profile>
    <!-- Profile: Kubernetes -->
    <profile>
      <id>k8s</id>
      <properties>
        <build.profile.id>k8s</build.profile.id>
        <spring.profile.active>k8s</spring.profile.active>
      </properties>
    </profile>
  </profiles>

  <dependencies>
    <!-- number of properties have been renamed or deprecated. You can use the spring-boot-properties-migrator module to identify those properties -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-properties-migrator</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Spring MVC & toolings -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <!-- <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions> -->
    </dependency>
    <!-- Log4j2 -->
    <!-- <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j2</artifactId>
    </dependency> -->
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Enable Prometheus scrapping  -->
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
      <version>${micrometer.version}</version>
    </dependency>

    <!-- JPA & MySQL & H2-->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql-connector.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Database version management -->

    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
      <version>${liquibase.version}</version>
    </dependency>

    <!-- Lombok -->

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Model Mapper -->

    <dependency>
      <groupId>org.modelmapper</groupId>
      <artifactId>modelmapper</artifactId>
      <version>${modelmapper.version}</version>
    </dependency>

    <!-- Test toolings -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <!-- exclude junit 4 -->
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- Jupiter: testing API -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Platform: For IDEs & plugins to be able to launch junit tests -->
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Vintage: To support running JUnit 3 and JUnit 4 written tests on the JUnit 5 platform -->
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Mockito extention -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Kubernetes -->

    <!-- Discovery Client implementation that resolves service names to Kubernetes Services -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-kubernetes</artifactId>
    </dependency>
    <!-- Load application properties from Kubernetes ConfigMaps and Secrets. Reload application properties when a ConfigMap or Secret changes. -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-kubernetes-config</artifactId>
    </dependency>


    <!-- Swagger -->

    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>2.7.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
      <version>2.7.0</version>
      <scope>compile</scope>
    </dependency>

    <!-- Security & JWT -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>0.10.5</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>0.10.5</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>0.10.5</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Lang 3 -->

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.9</version>
    </dependency>

    <!-- Firebase Admin -->

    <dependency>
      <groupId>com.google.firebase</groupId>
      <artifactId>firebase-admin</artifactId>
      <version>6.8.0</version>
    </dependency>

    <!-- ClassNotFoundException: javax.xml.bind.JAXBContext error on startup, it’s because you’re running on Java 11 -->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>${jaxb.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>${jaxb.version}</version>
    </dependency>

  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- Maven build -->
  <build>

    <pluginManagement>
      <plugins>
        <!-- Code coverage -->
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>3.7.0.1746</version>
        </plugin>

      </plugins>
    </pluginManagement>

    <!-- Build ressource -->

    <resources>
      <!-- Allow Maven to replace the spring.profiles.active in application.properties -->
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <!-- Build plugins -->

    <plugins>
      <!-- Maven -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>com.carros.CarrosApplication</mainClass>
        </configuration>
      </plugin>

      <!-- Unit tests -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M4</version>
        <configuration>
          <skipTests>${skip.unit.test}</skipTests>
          <argLine>${surefireArgLine}</argLine>
          <excludes>
            <exclude>**/*IntegrationTest.java</exclude>
          </excludes>
        </configuration>
        <!-- Default -->
        <executions>
          <execution>
            <id>unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Integration tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <!-- Default -->
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <skipTests>${skip.integration.test}</skipTests>
              <argLine>${failsafeArgLine}</argLine>
              <includes>
                <include>**/*IntegrationTest.java</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Code coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.4</version>
        <executions>
          <!-- Reporting UT -->
          <execution>
            <id>pre-unit-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${jacoco.ut.execution.data.file}</destFile>
              <propertyName>surefireArgLine</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${jacoco.ut.execution.data.file}</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
            </configuration>
          </execution>
          <!-- Reporting IT -->
          <execution>
            <id>pre-integration-test</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${jacoco.it.execution.data.file}</destFile>
              <propertyName>failsafeArgLine</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>post-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${jacoco.it.execution.data.file}</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
            </configuration>
          </execution>
          <!-- Merge Report -->
          <execution>
            <id>merge-results</id>
            <phase>verify</phase>
            <goals>
              <goal>merge</goal>
            </goals>
            <configuration>
              <fileSets>
                <fileSet>
                  <directory>${project.build.directory}/coverage-reports/</directory>
                  <includes>
                    <include>*.exec</include>
                  </includes>
                </fileSet>
              </fileSets>
              <destFile>${project.build.directory}/jacoco.exec</destFile>
            </configuration>
          </execution>
          <execution>
            <id>post-merge-report</id>
            <phase>verify</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Code quality: PMD (standalone: mvn pmd:pmd) -->
      <!-- <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>3.12.0</version>
        <configuration>
          <targetJdk>${java.version}</targetJdk>
          <includeTests>true</includeTests>
          <failOnViolation>true</failOnViolation>
          <printFailingErrors>true</printFailingErrors>
        </configuration>
      </plugin> -->

      <!-- Code quality: Spotbugs (standalone: mvn spotbugs:check) -->
      <!-- <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>3.1.12</version>
        <configuration>
          <includeTests>true</includeTests>
          <effort>Max</effort>
          <threshold>Low</threshold>
          <failOnError>false</failOnError>
        </configuration>
      </plugin> -->


      <!-- Source code style checking (standalone: mvn checkstyle:checkstyle) -->
      <!-- <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <configLocation>checkstyle.xml</configLocation>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
          <excludes>module-info.java</excludes>
          <failOnViolation>true</failOnViolation>
          <failsOnError>true</failsOnError>
          <consoleOutput>true</consoleOutput>
        </configuration>
      </plugin> -->

      <!-- Jib -->
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>${jib.version}</version>
        <configuration>
          <skip>${jib.skip}</skip>
          <!-- <allowInsecureRegistries>true</allowInsecureRegistries> -->
          <from>
            <image>gcr.io/distroless/java:11</image>
            <!-- <image>adoptopenjdk:11-jre-hotspot</image> -->
          </from>
          <!-- Passing params through CI/CD -->
          <!-- <to>
            <image>docker.io/${jib.to.image.username}/${project.artifactId}</image>
            <auth>
              <username>${jib.to.auth.username}</username>
            </auth>
            <tags>
              <tag>${project.version}</tag>
            </tags>
          </to> -->
          <container>
            <!-- Linux distribution: User with the least permissions on the system -->
            <user>nobody:nogroup</user>
            <ports>
              <port>${jib.container.port}</port>
            </ports>
            <!--  Defining in JAVA_TOOL_OPTIONS for better control -->
            <!-- <jvmFlags>
              <jvmFlag>-Xms128m</jvmFlag> Initial heap size 
              <jvmFlag>-Xmx256m</jvmFlag> Max heap size
            </jvmFlags> -->
            <creationTime>${maven.build.timestamp}</creationTime>
          </container>
        </configuration>
      </plugin>
      <!-- mvn -e package -Dimage=docker.io/jojoooo1/api-store-mongo:latest -Djib.to.auth.username=jojoooo1 -Djib.to.auth.password=Rz2UkNims -->
    </plugins>

  </build>

  <repositories>
    <repository>
      <id>spring-milestones</id>
      <name>Spring Milestones</name>
      <url>https://repo.spring.io/milestone</url>
    </repository>
  </repositories>

</project>