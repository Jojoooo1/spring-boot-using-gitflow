name: "Release branch: builds and deploys image"

on:
  pull_request:
    types: [opened, synchronize, reopened] # d.
    branches: [master]

env:
  GITHUB_USERNAME: jojoooo1
  DOCKER_USERNAME: jojoooo1
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE: carros

jobs:
  # Does not deloy to k8s staging => GitOps pattern (flux will do it automatically)
  release-test-build-and-deploy-release-candidate:
    if: "contains(toJSON(github.head_ref), 'release-') && github.event.action != 'closed'"
    runs-on: ubuntu-latest
    steps:
      ## Setup ## 
      - uses: actions/checkout@v2
        # by default use github.sha => on pull request a new SHA is created
        with:
          ref: ${{ github.head_ref }} # That is why we set ref to head_ref (current branch)

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      ## Unit & Integration Test ##
      - name: Run Unit & Integration Test
        run: mvn clean verify -P all-test

      # TODO:  on push failure send notification
      # Can use Sonar
      # Or can use PMD, FindBugs and Checkstyle
      # Can add dependency scanning
      # Can upload test report

      ## Sets environment variables ##
      - name: "Sets ENV_VARIABLE"
        run: |
          echo "::set-env name=RELEASE_VERSION::${GITHUB_HEAD_REF##*release-}"
          echo "::set-env name=IMAGE_REGISTRY::docker.io/${DOCKER_USERNAME}/$DOCKER_IMAGE"

      - name: "Verify Semantic versioning pattern"
        run: |
          TAG_LIST=(`echo $RELEASE_VERSION | tr '.' ' '`)
          echo "${TAG_LIST[*]}" 
          # Exit if invalid semver
          # Github bug one line if not working: [[ "${#TAG_LIST[@]}" -ne 3 ]] && echo "$RELEASE_VERSION is not a valid semantic version" && exit 1
          if [[ "${#TAG_LIST[@]}" -ne 3 ]]; then
            echo "$RELEASE_VERSION is not a valid semantic version"
            exit 1
          fi

      - run: echo "::set-env name=RELEASE_NAME::rc-${RELEASE_VERSION}-${{ github.event.pull_request.head.sha }}" # new run because can not use $RELEASE_VERSION in same run
      - name: "echo ENV_VARIABLE"
        run: |
          echo BRANCH_NAME: "$GITHUB_HEAD_REF"
          echo RELEASE_VERSION: "$RELEASE_VERSION"

          echo RELEASE_NAME: "$RELEASE_NAME"
          echo IMAGE_REGISTRY: $IMAGE_REGISTRY
          echo DOCKER_USERNAME: $DOCKER_USERNAME

      ## Sets Maven version ##
      - name: Sets Maven Release Candidate version in pom.xml
        run: mvn versions:set -DnewVersion=$RELEASE_NAME

      ## Push to image registry ##
      - name: Build & Push Release Candidate to Docker registry
        run: |
          mvn clean compile -P k8s jib:build \
            -Djib.to.auth.username=$DOCKER_USERNAME \
            -Djib.to.auth.password=$DOCKER_PASSWORD \
            -Djib.to.image=$IMAGE_REGISTRY \
            -Djib.to.tags=$RELEASE_NAME

      ## Commit maven version update ##
      ## If protected can use force push with admin right and skip-ci
      # TODO: try skip checks true
      # git commit -m "Update README.
      # >
      # >
      # skip-checks: true
      - name: 'Committing changes to branch "${{ github.head_ref }}"'
        run: |
          git config --global user.name $GITHUB_USERNAME
          git config --global user.email "$GITHUB_USERNAME@users.noreply.github.com"
          git diff
          git add . 
          git commit \
            -m "version updated to '$RELEASE_NAME' in pom.xml & image pushed to registry 'docker.io/${DOCKER_USERNAME}/${DOCKER_IMAGE}:$RELEASE_NAME'"

          git push origin $GITHUB_HEAD_REF
