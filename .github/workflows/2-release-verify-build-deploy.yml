name: CI for building and deploying release candidate image to staging

on:
  push:
    branches: [release-*] # d. (opened, synchronize, or reopened)

env: 
  DOCKER_USERNAME: jojoooo1
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE : carros

jobs:
  release-verify-build:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      # Setup
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Verifies UT & IT
      - name: Build with Maven
        run: mvn clean verify -P all-test

      # TODO: on push failure send notification
      #
      # Can use Sonar
      # Or can use PMD, FindBugs and Checkstyle
      # Can add dependency scanning

  release-build-image:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    runs-on: ubuntu-latest
    needs: release-verify-build
    steps:
      - name: "Sets ENV_VARIABLE"
        run: |
          echo "::set-env name=SOURCE_BRANCH::${GITHUB_REF##*/}"
          echo "::set-env name=RELEASE_VERSION::${GITHUB_REF##*release-}"
      - name: echo "::set-env name=RELEASE_NAME::${RELEASE_VERSION}.rc-$GITHUB_SHA"

      - name: "echo ENV_VARIABLE"
        run: |
          echo SOURCE_BRANCH: "$SOURCE_BRANCH"
          echo RELEASE_VERSION: "$RELEASE_VERSION"
          echo RELEASE_NAME: "$RELEASE_NAME"
          
      - name: Sets Maven Release Candidate version in pom.xml
        run: mvn versions:set -DnewVersion=$RELEASE_NAME

      - name: Build & Push Release Candidate to Docker registry
        run: |
          mvn compile -P staging jib:build \
            -Djib.to.auth.username=$DOCKER_USERNAME \
            -Djib.to.image=docker.io/${ DOCKER_USERNAME }/$DOCKER_IMAGE \
            -Djib.to.auth.password=$DOCKER_PASSWORD \
            -Djib.to.tags=$RELEASE_NAME

      - name: Commit changes to $SOURCE_BRANCH
        run: |
          git diff
          git add -am "Pushed image to: docker.io/${ DOCKER_USERNAME }/${ DOCKER_IMAGE }:$RELEASE_NAME"
          git push origin $SOURCE_BRANCH
