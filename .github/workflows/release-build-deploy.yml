name: CI for release branch

on:
  pull_request:
    branches: [release-v*]

  push:
    branches: [release-v*]

jobs:
  feature-build:
    runs-on: ubuntu-latest
    steps:
      # Setup
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Test
      - name: Build with Maven
        run: mvn clean verify -P all-test
      # Can use Sonar
      # Or can use PMD, FindBugs and Checkstyle
      # Can add dependency scanning
      # - name: If fails send notification
      #   if: failure()
      #   uses: actions/heroku@master

  feature-build-image:
    runs-on: ubuntu-latest
    needs: feature-build
    if: github.event_name == 'push'
    steps:
      - name: Output RELEASE_NUMBER
        id: branch_name
        run: echo ::set-output name=RELEASE_NUMBER::${GITHUB_REF##*-v}

      - name: Set Maven release candidate version
        env:
          RELEASE_NUMBER: ${{ steps.branch_name.outputs.RELEASE_NUMBER }}
        run: mvn versions:set -DnewVersion=${{ RELEASE_NUMBER }}-SNAPSHOT.RC-${{ github.sha }}

      - name: Build & Push image to DockerHub
        run: mvn compile jib:build -Djib.to.auth.password=${{ secrets.DOCKERHUB_PASSWORD }}

  feature-deploy-image:
    runs-on: ubuntu-latest
    needs: feature-build-image
    if: github.event_name == 'push'
    steps:
      - name: Output RELEASE_NUMBER
        id: branch_name
        run: echo ::set-output name=RELEASE_NUMBER::${GITHUB_REF##*-v}

      - name: Set Maven release candidate version
        env:
          RELEASE_NUMBER: ${{ steps.branch_name.outputs.RELEASE_NUMBER }}
        run: mvn versions:set -DnewVersion=${{ RELEASE_NUMBER }}-SNAPSHOT.RC-${{ github.sha }}

      - name: Build & Push image to DockerHub
        run: mvn compile jib:build -Djib.to.auth.password=${{ secrets.DOCKERHUB_PASSWORD }}
    # - name: Build docker image
    #   run: mvn clean verify -P all-test # can use sonar:sonar
    # - run: mkdir staging && cp target/*.jar staging
    #   if: github.event_name == 'push'
    # - name: Upload Maven build artifact
    #   if: github.event_name == 'push'
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: Package
    #     path: staging
